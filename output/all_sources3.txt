파일경로: backend\app.js
// backend/app.js
const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
const app = express();
const mongoose = require("mongoose");
const path = require("path");
require("dotenv").config();

const corsOptions = {
  origin: "http://localhost:3000",
  credentials: true,
};
app.use(cors(corsOptions));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

const userRoutes = require("./routes/users");
const musicRoutes = require("./routes/music");
const postsRoutes = require("./routes/posts");
const sheetsRoutes = require("./routes/sheets");

// API 라우트를 먼저 선언
app.use("/api/users", userRoutes);
app.use("/api/music", musicRoutes);
app.use("/api/posts", postsRoutes);
app.use("/api/sheets", sheetsRoutes);

// 그 뒤 정적 파일 제공
app.use(express.static(path.join(__dirname, "../frontend")));
app.use("/uploads", express.static(path.join(__dirname, "uploads")));

mongoose
  .connect(process.env.MONGODB_URI)
  .then(() => {
    console.log("DB Connected");
    const PORT = process.env.PORT || 5000;
    app.listen(PORT, () => {
      console.log(`Server running on port ${PORT}`);
    });
  })
  .catch((err) => {
    console.error("DB Connection Error:", err);
  });


파일경로: backend\controllers\musicController.js
// backend/controllers/musicController.js
const Music = require("../models/Music");
const User = require("../models/User");
const fs = require("fs");
const path = require("path");

exports.uploadMusic = async (req, res) => {
  try {
    const { title } = req.body;
    const userId = req.userId;
    const musicTitle = title || "녹음_" + new Date().toISOString();
    const fileUrl = `/uploads/${req.file.filename}`;
    const newMusic = await Music.create({
      title: musicTitle,
      fileUrl,
      uploadedBy: userId,
    });

    await User.findByIdAndUpdate(userId, { $push: { uploads: newMusic._id } });

    res.status(201).json({ message: "음악 업로드 성공", music: newMusic });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.getUserMusic = async (req, res) => {
  try {
    const userId = req.userId;
    const musicList = await Music.find({ uploadedBy: userId });
    res.status(200).json({ musicList });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.deleteMusic = async (req, res) => {
  try {
    const userId = req.userId;
    const { id } = req.params;
    const music = await Music.findById(id);
    if (!music) return res.status(404).json({ error: "음악을 찾을 수 없음" });
    if (music.uploadedBy.toString() !== userId) {
      return res.status(403).json({ error: "삭제 권한 없음" });
    }

    // 파일 삭제
    const uploadsPath = path.join(__dirname, "../uploads");
    const oldFilename = path.basename(music.fileUrl);
    const oldFilePath = path.join(uploadsPath, oldFilename);
    if (fs.existsSync(oldFilePath)) {
      fs.unlinkSync(oldFilePath);
    }

    await Music.findByIdAndDelete(id);
    await User.findByIdAndUpdate(userId, { $pull: { uploads: id } });

    res.status(200).json({ message: "음악 삭제 성공" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "서버 오류" });
  }
};


파일경로: backend\controllers\postController.js
// backend/controllers/postController.js

const Post = require("../models/Post");
const Music = require("../models/Music"); // 라이브러리 음악 조회를 위해 추가

// 게시글 생성
exports.createPost = async (req, res) => {
  try {
    const { title, content, libraryMusicId, librarySheetUrl } = req.body;
    let musicFileUrl = null;

    if (libraryMusicId) {
      // 라이브러리에서 음악 선택한 경우
      const music = await Music.findById(libraryMusicId);
      if (!music) {
        return res
          .status(400)
          .json({ message: "선택한 라이브러리 음악을 찾을 수 없습니다." });
      }
      musicFileUrl = music.fileUrl; // 라이브러리 음악의 fileUrl 사용
    }

    // content에 악보 URL 추가
    let finalContent = content;
    if (librarySheetUrl) {
      finalContent += `\n[악보: ${librarySheetUrl}]`;
    }

    const newPost = await Post.create({
      author: req.userId,
      title,
      content: finalContent,
      musicFileUrl,
    });

    res.status(201).json({ message: "게시글 작성 성공", post: newPost });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "서버 오류" });
  }
};

// 모든 게시글 조회
exports.getPosts = async (req, res) => {
  try {
    const posts = await Post.find({})
      .populate("author", "nickname profilePicture")
      .sort({ createdAt: -1 });

    const postsWithLikeCount = posts.map((post) => {
      const postObj = post.toObject();
      postObj.likeCount = post.likes.length;
      return postObj;
    });

    res.status(200).json({ posts: postsWithLikeCount });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "서버 오류" });
  }
};

// 내 게시글 조회
exports.getMyPosts = async (req, res) => {
  try {
    const userId = req.userId;
    const posts = await Post.find({ author: userId })
      .populate("author", "nickname profilePicture")
      .sort({ createdAt: -1 });

    const postsWithLikeCount = posts.map((post) => {
      const postObj = post.toObject();
      postObj.likeCount = post.likes.length;
      return postObj;
    });

    res.status(200).json({ posts: postsWithLikeCount });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "서버 오류" });
  }
};

// 특정 게시글 조회
exports.getPostById = async (req, res) => {
  try {
    const { id } = req.params;
    const post = await Post.findById(id)
      .populate("author", "nickname profilePicture")
      .populate("comments.author", "nickname profilePicture");
    if (!post)
      return res.status(404).json({ message: "게시글을 찾을 수 없습니다." });

    const postObj = post.toObject();
    postObj.likeCount = post.likes.length;

    res.status(200).json({ post: postObj });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "서버 오류" });
  }
};

// 게시글 수정
exports.updatePost = async (req, res) => {
  try {
    const { id } = req.params;
    const { title, content, removeMusic, libraryMusicId, librarySheetUrl } =
      req.body;

    const post = await Post.findById(id);
    if (!post)
      return res.status(404).json({ message: "게시글을 찾을 수 없습니다." });
    if (post.author.toString() !== req.userId) {
      return res
        .status(403)
        .json({ message: "게시글을 수정할 권한이 없습니다." });
    }

    if (title) post.title = title;
    if (content) post.content = content;

    if (libraryMusicId) {
      // 라이브러리에서 음악 선택
      const music = await Music.findById(libraryMusicId);
      if (!music) {
        return res
          .status(400)
          .json({ message: "선택한 라이브러리 음악을 찾을 수 없습니다." });
      }
      post.musicFileUrl = music.fileUrl;
    } else if (removeMusic === "true") {
      // 음악 제거
      post.musicFileUrl = null;
    }

    // content에 악보 URL 추가
    if (librarySheetUrl) {
      post.content += `\n[악보: ${librarySheetUrl}]`;
    }

    await post.save();
    res.status(200).json({ message: "게시글 수정 성공", post });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "서버 오류" });
  }
};

// 게시글 삭제
exports.deletePost = async (req, res) => {
  try {
    const { id } = req.params;
    const post = await Post.findById(id);
    if (!post)
      return res.status(404).json({ message: "게시글을 찾을 수 없습니다." });
    if (post.author.toString() !== req.userId) {
      return res
        .status(403)
        .json({ message: "게시글을 삭제할 권한이 없습니다." });
    }

    // 게시글 삭제 (라이브러리의 파일은 삭제하지 않음)
    await Post.findByIdAndDelete(id);
    res.status(200).json({ message: "게시글 삭제 성공" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "서버 오류" });
  }
};

// 댓글 추가
exports.addComment = async (req, res) => {
  try {
    const { id } = req.params;
    const { content } = req.body;
    const post = await Post.findById(id);
    if (!post)
      return res.status(400).json({ message: "게시글을 찾을 수 없습니다." });

    post.comments.push({ author: req.userId, content });
    await post.save();

    res.status(201).json({ message: "댓글 추가 성공" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "서버 오류" });
  }
};

// 댓글 수정
exports.updateComment = async (req, res) => {
  try {
    const { id, commentId } = req.params;
    const { content } = req.body;
    const post = await Post.findById(id);
    if (!post)
      return res.status(404).json({ message: "게시글을 찾을 수 없습니다." });

    const comment = post.comments.id(commentId);
    if (!comment)
      return res.status(404).json({ message: "댓글을 찾을 수 없습니다." });
    if (comment.author.toString() !== req.userId) {
      return res
        .status(403)
        .json({ message: "댓글을 수정할 권한이 없습니다." });
    }

    comment.content = content;
    await post.save();
    res.status(200).json({ message: "댓글 수정 성공" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "서버 오류" });
  }
};

// 댓글 삭제
exports.deleteComment = async (req, res) => {
  try {
    const { id, commentId } = req.params;
    const post = await Post.findById(id);
    if (!post)
      return res.status(404).json({ message: "게시글을 찾을 수 없습니다." });

    const comment = post.comments.id(commentId);
    if (!comment)
      return res.status(404).json({ message: "댓글을 찾을 수 없습니다." });
    if (comment.author.toString() !== req.userId) {
      return res
        .status(403)
        .json({ message: "댓글을 삭제할 권한이 없습니다." });
    }

    post.comments.pull(commentId);
    await post.save();

    res.status(200).json({ message: "댓글 삭제 성공" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "서버 오류" });
  }
};

// 좋아요 토글
exports.toggleLike = async (req, res) => {
  try {
    const { id } = req.params;
    const post = await Post.findById(id);
    if (!post)
      return res.status(404).json({ message: "게시글을 찾을 수 없습니다." });

    const userId = req.userId;
    const index = post.likes.findIndex((uid) => uid.toString() === userId);
    if (index === -1) {
      post.likes.push(userId);
    } else {
      post.likes.splice(index, 1);
    }

    await post.save();
    res.status(200).json({
      message: "좋아요 상태가 변경되었습니다.",
      likeCount: post.likes.length,
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "서버 오류" });
  }
};


파일경로: backend\controllers\sheetController.js
// backend/controllers/sheetController.js
const User = require("../models/User");
const mongoose = require("mongoose");
const fs = require("fs");
const path = require("path");

const SheetSchema = new mongoose.Schema({
  title: { type: String, required: true },
  fileUrl: { type: String, required: true },
  uploadedBy: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
  uploadDate: { type: Date, default: Date.now },
});
const Sheet = mongoose.model("Sheet", SheetSchema);

exports.uploadSheet = async (req, res) => {
  try {
    const { title } = req.body;
    const userId = req.userId;
    const sheetTitle = title || "악보_" + new Date().toISOString();
    const fileUrl = `/uploads/sheets/${req.file.filename}`;

    const newSheet = await Sheet.create({
      title: sheetTitle,
      fileUrl,
      uploadedBy: userId,
    });

    res.status(201).json({ message: "악보 업로드 성공", sheet: newSheet });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.getUserSheets = async (req, res) => {
  try {
    const userId = req.userId;
    const sheets = await Sheet.find({ uploadedBy: userId });
    res.status(200).json({ sheets });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.deleteSheet = async (req, res) => {
  try {
    const userId = req.userId;
    const { id } = req.params;
    const sheet = await Sheet.findById(id);
    if (!sheet) return res.status(404).json({ error: "악보를 찾을 수 없음" });
    if (sheet.uploadedBy.toString() !== userId) {
      return res.status(403).json({ error: "삭제 권한 없음" });
    }

    // 파일 삭제
    const uploadsPath = path.join(__dirname, "../uploads/sheets");
    const oldFilename = path.basename(sheet.fileUrl);
    const oldFilePath = path.join(uploadsPath, oldFilename);
    if (fs.existsSync(oldFilePath)) {
      fs.unlinkSync(oldFilePath);
    }

    await Sheet.findByIdAndDelete(id);
    res.status(200).json({ message: "악보 삭제 성공" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "서버 오류" });
  }
};


파일경로: backend\controllers\userController.js
// backend/controllers/userController.js
const User = require("../models/User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const validator = require("validator");
const path = require("path");
require("dotenv").config();

exports.register = async (req, res) => {
  try {
    const { username, password, nickname } = req.body;

    if (!validator.isAlphanumeric(username)) {
      return res
        .status(400)
        .json({ message: "아이디는 영문자와 숫자만 사용할 수 있습니다." });
    }

    if (password.length < 8) {
      return res
        .status(400)
        .json({ message: "비밀번호는 최소 8자 이상이어야 합니다." });
    }

    if (!/\d/.test(password) || !/[a-zA-Z]/.test(password)) {
      return res
        .status(400)
        .json({ message: "비밀번호는 숫자와 문자를 포함해야 합니다." });
    }

    if (!nickname || nickname.trim() === "") {
      return res.status(400).json({ message: "닉네임을 입력해주세요." });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = await User.create({
      username,
      password: hashedPassword,
      nickname,
    });
    res.status(201).json({ message: "회원가입 성공", user: newUser });
  } catch (err) {
    console.error(err);
    res
      .status(500)
      .json({ message: "서버 오류가 발생했습니다. 관리자에게 문의하세요." });
  }
};

exports.login = async (req, res) => {
  try {
    const { username, password } = req.body;

    if (!username || !password) {
      return res
        .status(400)
        .json({ message: "아이디와 비밀번호를 입력해주세요." });
    }

    const user = await User.findOne({ username });
    if (!user)
      return res
        .status(400)
        .json({ message: "아이디나 비밀번호가 틀렸습니다." });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch)
      return res
        .status(400)
        .json({ message: "아이디나 비밀번호가 틀렸습니다." });

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
      expiresIn: "1h",
    });

    res.status(200).json({ message: "로그인 성공", token, userId: user._id });
  } catch (err) {
    console.error(err);
    res
      .status(500)
      .json({ message: "서버 오류가 발생했습니다. 관리자에게 문의하세요." });
  }
};

exports.getUserProfile = async (req, res) => {
  try {
    const userId = req.userId;
    const user = await User.findById(userId).populate("uploads");
    if (!user) return res.status(400).json({ message: "사용자 없음" });

    res.status(200).json({ user });
  } catch (err) {
    console.error(err);
    res
      .status(500)
      .json({ message: "서버 오류가 발생했습니다. 관리자에게 문의하세요." });
  }
};

exports.changePassword = async (req, res) => {
  try {
    const userId = req.userId;
    const { oldPassword, newPassword } = req.body;

    const user = await User.findById(userId);
    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch)
      return res
        .status(400)
        .json({ message: "기존 비밀번호가 일치하지 않습니다." });

    if (
      newPassword.length < 8 ||
      !/\d/.test(newPassword) ||
      !/[a-zA-Z]/.test(newPassword)
    ) {
      return res.status(400).json({ message: "새 비밀번호 조건 불충족" });
    }

    const hashed = await bcrypt.hash(newPassword, 10);
    user.password = hashed;
    await user.save();
    res.status(200).json({ message: "비밀번호 변경 성공" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "서버 오류" });
  }
};

exports.deleteUser = async (req, res) => {
  try {
    const userId = req.userId;
    await User.findByIdAndDelete(userId);
    res.status(200).json({ message: "회원탈퇴 성공" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "서버 오류" });
  }
};

exports.updateProfilePicture = async (req, res) => {
  try {
    const userId = req.userId;
    const user = await User.findById(userId);
    if (!user) return res.status(400).json({ message: "사용자 없음" });

    if (req.file) {
      // 새 파일 업로드
      const fileUrl = `/uploads/${req.file.filename}`;
      user.profilePicture = fileUrl;
      await user.save();
      return res
        .status(200)
        .json({ message: "프로필 사진 변경 성공", fileUrl });
    } else if (req.body.profilePicture) {
      // 기존 이미지를 선택한 경우
      user.profilePicture = req.body.profilePicture;
      await user.save();
      return res
        .status(200)
        .json({
          message: "프로필 사진 변경 성공",
          fileUrl: req.body.profilePicture,
        });
    } else {
      return res.status(400).json({ message: "프로필 사진 정보 없음" });
    }
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "서버 오류" });
  }
};


파일경로: backend\middlewares\authMiddleware.js
// backend/middlewares/authMiddleware.js
const jwt = require("jsonwebtoken");
require("dotenv").config();

module.exports = (req, res, next) => {
  let token = req.headers["authorization"];

  if (!token) return res.status(401).json({ message: "토큰 없음" });

  if (token.startsWith("Bearer ")) {
    token = token.slice(7, token.length);
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.userId = decoded.id;
    next();
  } catch (err) {
    res.status(401).json({ message: "유효하지 않은 토큰" });
  }
};


파일경로: backend\models\Music.js
// backend/models/Music.js
const mongoose = require("mongoose");

const MusicSchema = new mongoose.Schema({
  title: { type: String, required: true },
  fileUrl: { type: String, required: true },
  uploadedBy: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
  uploadDate: { type: Date, default: Date.now },
});

module.exports = mongoose.model("Music", MusicSchema);


파일경로: backend\models\Post.js
// backend/models/Post.js

const mongoose = require("mongoose");

const postSchema = new mongoose.Schema(
  {
    title: { type: String, required: true },
    content: { type: String, required: true },
    musicFileUrl: { type: String, default: null },
    author: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    comments: [
      {
        author: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
        content: { type: String, required: true },
        createdAt: { type: Date, default: Date.now },
      },
    ],
    likes: [{ type: mongoose.Schema.Types.ObjectId, ref: "User" }],
  },
  { timestamps: true }
);

module.exports = mongoose.model("Post", postSchema);


파일경로: backend\models\User.js
// backend/models/User.js
const mongoose = require("mongoose");

const UserSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  nickname: { type: String, required: true },
  profilePicture: { type: String },
  uploads: [{ type: mongoose.Schema.Types.ObjectId, ref: "Music" }],
});

module.exports = mongoose.model("User", UserSchema);


파일경로: backend\routes\music.js
// backend/routes/music.js
const express = require("express");
const router = express.Router();
const musicController = require("../controllers/musicController");
const authMiddleware = require("../middlewares/authMiddleware");
const multer = require("multer");
const path = require("path");

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, path.join(__dirname, "../uploads/"));
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname));
  },
});
const upload = multer({ storage });

// 음악 파일 업로드(라이브러리 저장)
router.post(
  "/upload",
  authMiddleware,
  upload.single("music"),
  musicController.uploadMusic
);

// 사용자의 음악 목록 조회
router.get("/user", authMiddleware, musicController.getUserMusic);

// 음악 삭제 라우트 추가
router.delete("/:id", authMiddleware, musicController.deleteMusic);

module.exports = router;


파일경로: backend\routes\posts.js
// backend/routes/posts.js
const express = require("express");
const router = express.Router();
const postController = require("../controllers/postController");
const authMiddleware = require("../middlewares/authMiddleware");
// const multer = require("multer"); // 제거
// const path = require("path"); // 제거

// const storage = multer.diskStorage({
//   destination: (req, file, cb) => {
//     cb(null, path.join(__dirname, "../uploads/"));
//   },
//   filename: (req, file, cb) => {
//     cb(null, Date.now() + path.extname(file.originalname));
//   },
// });
// const upload = multer({ storage }); // 제거

router
  .route("/")
  .get(postController.getPosts)
  .post(authMiddleware, postController.createPost); // multer 미들웨어 제거

router.get("/mine", authMiddleware, postController.getMyPosts);

router
  .route("/:id")
  .get(postController.getPostById)
  .put(authMiddleware, postController.updatePost) // multer 미들웨어 제거
  .delete(authMiddleware, postController.deletePost);

// 댓글 CRUD
router.post("/:id/comments", authMiddleware, postController.addComment);
router.put(
  "/:id/comments/:commentId",
  authMiddleware,
  postController.updateComment
);
router.delete(
  "/:id/comments/:commentId",
  authMiddleware,
  postController.deleteComment
);

// 좋아요 토글
router.post("/:id/like", authMiddleware, postController.toggleLike);

module.exports = router;


파일경로: backend\routes\sheets.js
// backend/routes/sheets.js
const express = require("express");
const router = express.Router();
const sheetController = require("../controllers/sheetController");
const authMiddleware = require("../middlewares/authMiddleware");
const multer = require("multer");
const path = require("path");

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, path.join(__dirname, "../uploads/sheets/"));
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname));
  },
});
const upload = multer({ storage });

// 악보 업로드
router.post(
  "/upload",
  authMiddleware,
  upload.single("sheet"),
  sheetController.uploadSheet
);

// 사용자의 악보 목록 조회
router.get("/user", authMiddleware, sheetController.getUserSheets);

// 악보 삭제 추가
router.delete("/:id", authMiddleware, sheetController.deleteSheet);

module.exports = router;


파일경로: backend\routes\users.js
// backend/routes/users.js
const express = require("express");
const router = express.Router();
const userController = require("../controllers/userController");
const authMiddleware = require("../middlewares/authMiddleware");
const multer = require("multer");
const path = require("path");

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, path.join(__dirname, "../uploads/"));
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname));
  },
});
const upload = multer({ storage });

// 회원가입
router.post("/register", userController.register);

// 로그인
router.post("/login", userController.login);

// 프로필 조회
router.get("/profile", authMiddleware, userController.getUserProfile);

// 비밀번호 변경
router.post("/change-password", authMiddleware, userController.changePassword);

// 회원탈퇴
router.delete("/delete", authMiddleware, userController.deleteUser);

// 프로필 사진 변경 (form-data로 profilePictureFile)
router.put(
  "/profile-picture",
  authMiddleware,
  upload.single("profilePictureFile"),
  userController.updateProfilePicture
);

module.exports = router;


파일경로: frontend\board.html
<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <title>게시판</title>
    <link rel="stylesheet" href="css/style.css" />
    <style>
      table {
        width: 80%;
        margin: 20px auto;
        border-collapse: collapse;
        table-layout: fixed;
      }
      colgroup col:nth-child(2) {
        width: 50%;
      }
      th,
      td {
        border: 1px solid #ccc;
        padding: 10px;
        text-align: center;
        word-wrap: break-word;
      }
      /* th는 style.css에서 베이지톤으로 지정됨 */
      .board-title {
        text-align: center;
        margin-top: 100px;
      }
      .board-title h1 {
        margin-bottom: 20px;
      }
      .logo {
        position: absolute;
        top: 10px;
        left: 10px;
        font-weight: bold;
        font-size: 24px;
        text-decoration: none;
        color: #333;
      }
      .new-post-btn {
        width: 80%;
        margin: 20px auto;
        text-align: right;
      }
      .pagination {
        display: flex;
        justify-content: center;
        margin-top: 20px;
      }
      .pagination button {
        margin: 0 10px;
      }
    </style>
  </head>
  <body>
    <a href="guitar.html" class="logo">ChordCraft</a>
    <div class="board-title">
      <h1>게시판</h1>
    </div>

    <div class="new-post-btn">
      <a href="newPost.html"><button>글쓰기</button></a>
    </div>

    <table>
      <colgroup>
        <col style="width: 50px" />
        <col />
        <col style="width: 100px" />
        <col style="width: 150px" />
        <col style="width: 50px" />
      </colgroup>
      <thead>
        <tr>
          <th>No</th>
          <th>제목</th>
          <th>글쓴이</th>
          <th>작성시간</th>
          <th>좋아요</th>
        </tr>
      </thead>
      <tbody id="board-list"></tbody>
    </table>

    <div class="pagination">
      <button id="prev-page">이전</button>
      <button id="next-page">다음</button>
    </div>

    <script src="js/board.js"></script>
  </body>
</html>


파일경로: frontend\editPost.html
<!-- frontend/editPost.html -->
<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <title>글 수정</title>
    <link rel="stylesheet" href="css/style.css" />
    <style>
      .edit-post-container {
        border: 2px solid #ccc;
        padding: 20px;
        background-color: #faf8ef;
        border-radius: 8px;
        width: 80%;
        margin: 120px auto;
      }
      .edit-post-container h1 {
        text-align: center;
        margin-bottom: 20px;
      }
      .edit-post-container form {
        display: flex;
        flex-direction: column;
      }
      .edit-post-container input[type="text"],
      .edit-post-container textarea {
        margin-bottom: 10px;
        padding: 8px;
        font-size: 14px;
      }
      .edit-post-container button {
        background: #f3e5ab;
        border: 1px solid #ccc;
        padding: 8px 14px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        margin: 5px;
        align-self: flex-end;
      }
      .edit-post-container button:hover {
        background-color: #ecd898;
      }

      .current-file {
        margin-bottom: 10px;
        font-size: 14px;
        color: #333;
      }
      .file-actions {
        margin-bottom: 10px;
      }

      .music-modal {
        display: none;
        position: fixed;
        top: 20%;
        left: 30%;
        width: 40%;
        background: #faf8ef;
        border: 1px solid #ccc;
        padding: 20px;
        border-radius: 8px;
        z-index: 999;
      }
      .music-modal h3 {
        text-align: center;
        margin-bottom: 10px;
      }
      .music-modal .switch-buttons {
        text-align: center;
        margin-bottom: 10px;
      }
      .music-modal .switch-buttons button {
        margin: 0 5px;
      }
      .music-modal ul {
        list-style: none;
        padding: 0;
        max-height: 200px;
        overflow: auto;
        border: 1px solid #ddd;
        padding: 5px;
        border-radius: 4px;
      }
      .music-modal li {
        margin-bottom: 5px;
        cursor: pointer;
        padding: 5px;
        border-radius: 4px;
      }
      .music-modal li:hover {
        background: #eee;
      }
      .music-modal .selected {
        background: #cfe3d4;
      }
      .music-modal #selected-item {
        text-align: center;
        margin-top: 10px;
        font-weight: bold;
      }

      /* "첨부" 버튼 스타일 */
      .music-modal .attach-button {
        display: block;
        margin: 15px auto 0 auto;
        background-color: #4caf50;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
      }
      .music-modal .attach-button:hover {
        background-color: #45a049;
      }
    </style>
  </head>
  <body>
    <a href="guitar.html" class="logo">ChordCraft</a>
    <div class="edit-post-container">
      <h1>글 수정</h1>
      <form id="edit-post-form">
        <input
          type="text"
          id="edit-post-title"
          placeholder="제목"
          required
        /><br />
        <textarea id="edit-post-content" placeholder="내용" required></textarea
        ><br />
        <!-- 라이브러리 업로드 버튼 -->
        <button type="button" id="library-music-btn">첨부하기</button>
        <div class="current-file" id="current-file-info" style="display: none">
          현재 음악 파일: <span id="current-file-name"></span>
        </div>
        <div class="file-actions" id="file-actions" style="display: none">
          <button type="button" id="delete-file-button">파일 삭제</button>
        </div>

        <input
          type="hidden"
          id="selected-library-music-id"
          name="libraryMusicId"
        />
        <input
          type="hidden"
          id="selected-library-sheet-url"
          name="librarySheetUrl"
        />

        <button type="submit">수정</button>
      </form>
    </div>

    <div class="music-modal" id="edit-music-modal">
      <button id="edit-music-modal-close">닫기</button>
      <h3>내 라이브러리</h3>
      <div class="switch-buttons">
        <button id="edit-library-music-switch">내 음악</button>
        <button id="edit-library-sheet-switch">내 악보</button>
      </div>
      <ul id="edit-modal-library-list"></ul>
      <div id="edit-selected-item"></div>
      <!-- "첨부" 버튼 추가 -->
      <button id="attach-edit-selected-item" class="attach-button" disabled>
        첨부
      </button>
    </div>

    <script src="js/editPost.js"></script>
  </body>
</html>


파일경로: frontend\guitar.html
<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <title>Chord Craft 메인페이지</title>
    <link rel="stylesheet" href="css/style.css" />
    <style>
      /* 기존 스타일 유지 */

      /* 녹음한 음악 제목 입력 모달 스타일 */
      .modal {
        display: none;
        position: fixed;
        top: 20%;
        left: 30%;
        width: 40%;
        background: #faf8ef;
        border: 1px solid #ccc;
        padding: 20px;
        border-radius: 8px;
        z-index: 999;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      }
      .modal h3 {
        text-align: center;
        margin-bottom: 10px;
      }
      .modal input[type="text"] {
        width: 100%;
        padding: 8px;
        margin-bottom: 10px;
        font-size: 14px;
      }
      .modal button {
        padding: 8px 14px;
        margin-right: 10px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
      }
      .modal button#save-recorded-music {
        background-color: #f3e5ab;
      }
      .modal button#save-recorded-music:hover {
        background-color: #ecd898;
      }
      .modal button#close-record-name-modal {
        background-color: #ccc;
      }
      .modal button#close-record-name-modal:hover {
        background-color: #bbb;
      }

      /* 악보 보관함 모달 스타일은 기존 유지 */
    </style>
  </head>
  <body>
    <a href="guitar.html" class="logo">ChordCraft</a>
    <button class="logout-button" id="logout-button">로그아웃</button>

    <h1>Virtual Guitar 연주</h1>

    <div id="nav-buttons" style="margin-bottom: 20px; text-align: center">
      <a href="profile.html"><button>프로필 페이지</button></a>
      <a href="board.html"><button>게시판 페이지</button></a>
      <a href="library.html"><button>내 라이브러리</button></a>
    </div>

    <div id="current-chord-display" style="text-align: center">
      선택된 코드: 없음
    </div>

    <div class="recording-container">
      <div id="recording-status"></div>
      <button id="record-button">녹음 시작</button>
    </div>

    <!-- 악보 업로드 버튼 (파일 선택 폼 제거) -->
    <button id="open-sheet-upload">
      악보 보관함 열기 (악보 업로드 / 선택)
    </button>
    <div style="text-align: center">
      <img id="sheet-music" alt="악보" />
    </div>

    <div id="guitar">
      <div id="guitar-body">
        <div class="string" data-string="6"></div>
        <div class="string" data-string="5"></div>
        <div class="string" data-string="4"></div>
        <div class="string" data-string="3"></div>
        <div class="string" data-string="2"></div>
        <div class="string" data-string="1"></div>
      </div>
    </div>

    <h2>키보드 설정</h2>
    <form id="keyboard-settings-form">
      <label for="code-keys">코드 선택 키:</label>
      <input type="text" id="code-keys" value="C,D,E,F,G,A,B" />
      <label for="chord-type-keys">코드 모드 키:</label>
      <input type="text" id="chord-type-keys" value="1,2,3,4,5,6" />
      <label for="string-keys">연주 키:</label>
      <input type="text" id="string-keys" value="u,i,o,p,[,]" />
      <button type="submit">설정 저장</button>
    </form>

    <div>
      <h3>코드 모드 키 설명</h3>
      <ul>
        <li>1: Major</li>
        <li>2: 7</li>
        <li>3: m</li>
        <li>4: M7</li>
        <li>5: m7</li>
        <li>6: Barre Chord</li>
      </ul>
      <p>예: C + 3 => Cm 코드</p>
    </div>

    <h2>악기 선택</h2>
    <div id="instruments" style="text-align: center">
      <select id="instrument-select">
        <option value="guitar">기타</option>
        <option value="piano">피아노</option>
        <option value="violin">바이올린</option>
      </select>
    </div>

    <!-- 녹음한 음악 이름 지정 모달 -->
    <div class="modal" id="record-name-modal">
      <h3>녹음한 음악 제목 입력</h3>
      <input type="text" id="recorded-music-title" placeholder="음악 제목" />
      <button id="save-recorded-music">저장하기</button>
      <button id="close-record-name-modal">취소</button>
    </div>

    <!-- 악보 보관함 모달(악보 업로드/선택) -->
    <div class="modal" id="sheet-library-modal">
      <button id="close-sheet-library-modal">닫기</button>
      <h3>악보 보관함</h3>
      <h4>등록된 악보</h4>
      <div
        id="sheet-library-list"
        style="
          border: 1px solid #ccc;
          padding: 10px;
          max-height: 200px;
          overflow: auto;
        "
      ></div>
      <h4>악보 업로드</h4>
      <input type="text" id="sheet-upload-title" placeholder="악보 제목" />
      <input type="file" id="sheet-upload-input" accept="image/*" />
      <button id="upload-sheet-btn">업로드</button>
    </div>

    <script type="module" src="js/guitar.js"></script>
  </body>
</html>


파일경로: frontend\index.html
<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <title>Chord Craft 시작페이지</title>
    <link rel="stylesheet" href="css/style.css" />
    <style>
      body {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
      }
      .logo-area {
        text-align: center;
      }
      .logo-area img {
        width: 600px; /* 로고 크기 조정 */
        display: block;
        margin: 0 auto;
      }
      .logo-area h1 {
        margin-top: 20px;
        font-size: 32px;
        font-weight: bold;
        color: #333;
      }
      .form-area {
        text-align: center;
        margin-top: 20px;
      }
      #register-form {
        display: none;
        margin-top: 20px;
      }
      input[type="text"],
      input[type="password"] {
        margin: 10px 0;
        padding: 8px;
        width: 200px;
        border: 1px solid #ccc;
        border-radius: 4px;
      }
      button {
        margin-top: 10px;
      }
    </style>
  </head>
  <body>
    <div class="logo-area">
      <img src="logo.png" alt="프로젝트 로고" />
      <h1>Chord Craft</h1>
    </div>
    <div class="form-area">
      <form id="login-form">
        <input
          type="text"
          id="login-username"
          placeholder="아이디"
          required
        /><br />
        <input
          type="password"
          id="login-password"
          placeholder="비밀번호"
          required
        /><br />
        <button type="submit">로그인</button>
      </form>
      <button id="show-register">회원가입</button>

      <form id="register-form">
        <input
          type="text"
          id="register-username"
          placeholder="아이디"
          required
        /><br />
        <input
          type="password"
          id="register-password"
          placeholder="비밀번호"
          required
        /><br />
        <input
          type="text"
          id="register-nickname"
          placeholder="닉네임"
          required
        /><br />
        <button type="submit">회원가입</button>
      </form>
    </div>

    <script>
      document.getElementById("show-register").addEventListener("click", () => {
        document.getElementById("register-form").style.display = "block";
      });
    </script>
    <script src="js/auth.js"></script>
  </body>
</html>


파일경로: frontend\library.html
<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <title>내 라이브러리</title>
    <link rel="stylesheet" href="css/style.css" />
    <style>
      .tabs {
        display: flex;
        justify-content: center;
        margin: 20px;
      }
      .tabs button {
        margin: 0 10px;
        padding: 8px;
      }
      .tab-content {
        width: 80%;
        margin: 20px auto;
      }
      .hidden {
        display: none;
      }

      /* 보관함 레이아웃 박스 */
      .box-container {
        border: 1px solid #ccc;
        background: #faf8ef;
        padding: 20px;
        border-radius: 8px;
      }
      .box-container h2 {
        margin-top: 0;
      }
      ul {
        list-style-type: none;
        padding: 0;
      }
      ul li {
        margin-bottom: 10px;
        border: 1px solid #ddd;
        padding: 5px;
        border-radius: 4px;
      }
      ul li button {
        margin-left: 10px;
      }
    </style>
  </head>
  <body>
    <a href="guitar.html" class="logo">ChordCraft</a>
    <h1 style="text-align: center">내 라이브러리</h1>

    <div class="tabs">
      <button id="music-tab">음악 보관함</button>
      <button id="sheet-tab">악보 보관함</button>
    </div>

    <div id="music-content" class="tab-content">
      <div class="box-container">
        <h2>음악 목록</h2>
        <ul id="music-list"></ul>
      </div>
    </div>

    <div id="sheet-content" class="tab-content hidden">
      <div class="box-container">
        <h2>악보 목록</h2>
        <ul id="sheet-list"></ul>
        <h3>악보 업로드</h3>
        <form id="sheet-upload-form">
          <input
            type="text"
            id="sheet-title"
            placeholder="악보 제목"
            required
          />
          <input type="file" id="sheet-file" accept="image/*" required />
          <button type="submit">업로드</button>
        </form>
      </div>
    </div>

    <script src="js/library.js"></script>
  </body>
</html>


파일경로: frontend\myPosts.html
<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <title>내 게시판</title>
    <link rel="stylesheet" href="css/style.css" />
    <style>
      table {
        width: 80%;
        margin: 20px auto;
        border-collapse: collapse;
        table-layout: fixed;
      }
      colgroup col:nth-child(2) {
        width: 50%;
      }
      th,
      td {
        border: 1px solid #ccc;
        padding: 10px;
        text-align: center;
        word-wrap: break-word;
      }
      th {
        background-color: #f2f2f2;
      }
      .board-title {
        text-align: center;
        margin-top: 40px;
      }
      .board-title h1 {
        margin-bottom: 20px;
      }
      .logo {
        position: absolute;
        top: 10px;
        left: 10px;
        font-weight: bold;
        font-size: 24px;
        text-decoration: none;
        color: #333;
      }
      .new-post-btn {
        width: 80%;
        margin: 20px auto;
        text-align: right;
      }
    </style>
  </head>
  <body>
    <a href="guitar.html" class="logo">ChordCraft</a>
    <div class="board-title">
      <h1>내가 쓴 글</h1>
    </div>

    <div class="new-post-btn">
      <a href="newPost.html"><button>글쓰기</button></a>
    </div>

    <table>
      <colgroup>
        <col style="width: 50px" />
        <col />
        <col style="width: 100px" />
        <col style="width: 150px" />
        <col style="width: 50px" />
      </colgroup>
      <thead>
        <tr>
          <th>No</th>
          <th>제목</th>
          <th>글쓴이</th>
          <th>작성시간</th>
          <th>좋아요</th>
        </tr>
      </thead>
      <tbody id="my-board-list"></tbody>
    </table>

    <script src="js/myPosts.js"></script>
  </body>
</html>


파일경로: frontend\newPost.html
<!-- frontend/newPost.html -->
<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <title>새 글 작성</title>
    <link rel="stylesheet" href="css/style.css" />
    <style>
      .form-container {
        width: 80%;
        margin: 80px auto;
        border: 2px solid #ccc;
        background: #faf8ef;
        padding: 20px;
        border-radius: 8px;
      }
      .form-container h1 {
        text-align: center;
        margin-bottom: 20px;
      }
      .form-container form {
        display: flex;
        flex-direction: column;
      }
      .form-container input[type="text"],
      .form-container textarea {
        width: 100%;
        margin-bottom: 10px;
        padding: 8px;
        font-size: 14px;
      }
      .form-container button {
        background: #f3e5ab;
        border: 1px solid #ccc;
        padding: 8px 14px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        margin: 5px;
      }
      .form-container button:hover {
        background-color: #ecd898;
      }

      .music-modal {
        display: none;
        position: fixed;
        top: 20%;
        left: 30%;
        width: 40%;
        background: #faf8ef;
        border: 1px solid #ccc;
        padding: 20px;
        border-radius: 8px;
        z-index: 999;
      }
      .music-modal h3 {
        text-align: center;
        margin-bottom: 10px;
      }
      .music-modal .switch-buttons {
        text-align: center;
        margin-bottom: 10px;
      }
      .music-modal .switch-buttons button {
        margin: 0 5px;
      }
      .music-modal ul {
        list-style: none;
        padding: 0;
        max-height: 200px;
        overflow: auto;
        border: 1px solid #ddd;
        padding: 5px;
        border-radius: 4px;
      }
      .music-modal li {
        margin-bottom: 5px;
        cursor: pointer;
        padding: 5px;
        border-radius: 4px;
      }
      .music-modal li:hover {
        background: #eee;
      }
      .music-modal .selected {
        background: #cfe3d4;
      }
      .music-modal #selected-item {
        text-align: center;
        margin-top: 10px;
        font-weight: bold;
      }

      /* "첨부" 버튼 스타일 */
      .music-modal .attach-button {
        display: block;
        margin: 15px auto 0 auto;
        background-color: #4caf50;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
      }
      .music-modal .attach-button:hover {
        background-color: #45a049;
      }
    </style>
  </head>
  <body>
    <a href="guitar.html" class="logo">ChordCraft</a>
    <div class="form-container">
      <h1>새 게시글 작성</h1>
      <form id="new-post-form">
        <input
          type="text"
          id="new-post-title"
          placeholder="제목"
          required
        /><br />
        <textarea id="new-post-content" placeholder="내용" required></textarea
        ><br />
        <button type="button" id="attach-music-btn">첨부하기</button>
        <!-- 파일 input은 숨김, libraryMusicId와 librarySheetUrl로 처리 -->
        <input
          type="hidden"
          id="selected-library-music-id"
          name="libraryMusicId"
        />
        <input
          type="hidden"
          id="selected-library-sheet-url"
          name="librarySheetUrl"
        />
        <button type="submit">작성</button>
      </form>
    </div>

    <div class="music-modal" id="music-modal">
      <button id="music-modal-close">닫기</button>
      <h3>내 라이브러리</h3>
      <div class="switch-buttons">
        <button id="library-music-switch">내 음악</button>
        <button id="library-sheet-switch">내 악보</button>
      </div>
      <ul id="modal-library-list"></ul>
      <div id="selected-item"></div>
      <!-- "첨부" 버튼 추가 -->
      <button id="attach-selected-item" class="attach-button" disabled>
        첨부
      </button>
    </div>

    <script src="js/newPost.js"></script>
  </body>
</html>


파일경로: frontend\postDetail.html
<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <title>게시글 상세보기</title>
    <link rel="stylesheet" href="css/style.css" />
    <style>
      /* 기존에 post-detail-container 등 스타일은 style.css에서 처리.
         여기서는 music, content, like를 하나의 박스로 묶는 .post-main-content 추가 */
      .post-main-content {
        background: #fff;
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 15px;
        margin-bottom: 20px;
      }
      .post-main-content .music-play-button {
        text-align: center;
        margin-bottom: 20px;
      }
      .post-main-content .post-body-text {
        margin-bottom: 20px;
        text-align: left;
      }
      .post-main-content .like-section {
        text-align: center;
      }
      .like-button {
        font-size: 24px;
        background: none;
        border: none;
        cursor: pointer;
        transition: transform 0.3s, color 0.3s;
        color: gray;
      }
      .like-button:hover {
        transform: scale(1.1);
      }
      .like-button.liked {
        color: red;
      }
      .like-count {
        margin-top: 10px;
        font-weight: bold;
      }
    </style>
  </head>
  <body>
    <a href="guitar.html" class="logo">ChordCraft</a>
    <div class="post-detail-container">
      <div class="post-info">
        <h1 id="post-title"></h1>
        <div class="post-header">
          <div class="post-meta">
            작성자: <span id="post-author"></span> | 작성시간:
            <span id="post-date"></span>
          </div>
          <div class="post-actions">
            <button id="edit-button" style="display: none">수정</button>
            <button id="delete-button" style="display: none">삭제</button>
          </div>
        </div>
      </div>

      <!-- 하나의 박스에 음악재생, 본문, 좋아요를 순서대로 배치 -->
      <div class="post-main-content">
        <div class="music-play-button" id="post-music"></div>
        <div class="post-body-text">
          <p id="post-content"></p>
        </div>
        <div class="like-section">
          <button id="like-button" class="like-button">♥</button>
          <div class="like-count">좋아요: <span id="like-count">0</span></div>
        </div>
      </div>

      <div class="comment-section">
        <h3>댓글</h3>
        <div id="comment-list"></div>
        <div class="comment-form">
          <textarea id="comment-content" placeholder="댓글 내용"></textarea
          ><br />
          <button id="comment-submit">댓글 달기</button>
        </div>
      </div>
    </div>

    <script src="js/postDetail.js"></script>
  </body>
</html>


파일경로: frontend\profile.html
<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <title>프로필</title>
    <link rel="stylesheet" href="css/style.css" />
    <style>
      .profile-image-modal {
        display: none;
        position: fixed;
        top: 20%;
        left: 40%;
        background: #fff;
        border: 1px solid #ccc;
        padding: 10px;
        z-index: 999;
      }
      .profile-image-modal img {
        width: 50px;
        height: 50px;
        margin: 5px;
        cursor: pointer;
      }

      #page-title {
        margin-top: 120px; /* 로고와 겹치지 않도록 상단 마진 */
        text-align: center;
      }

      #upload-profile-pic-form {
        margin-top: 20px;
      }
    </style>
  </head>
  <body>
    <a href="guitar.html" class="logo">ChordCraft</a>
    <h1 id="page-title">프로필 페이지</h1>
    <div class="profile-info">
      <img
        id="profile-picture"
        src="/assets/images/profiles/default-profile.png"
        alt="프로필사진"
        width="100"
        height="100"
      />
      <p>닉네임: <span id="nickname-display"></span></p>
      <a href="myPosts.html">내 게시판</a>
    </div>
    <button id="change-profile-pic">프로필 사진 변경</button>

    <div class="profile-image-modal" id="profile-image-modal">
      <h4>프로필 이미지 선택 (기존 이미지)</h4>
      <div id="profile-image-list">
        <img
          src="/assets/images/profiles/img1.png"
          data-img="/assets/images/profiles/img1.png"
        />
        <img
          src="/assets/images/profiles/img2.png"
          data-img="/assets/images/profiles/img2.png"
        />
        <img
          src="/assets/images/profiles/img3.png"
          data-img="/assets/images/profiles/img3.png"
        />
      </div>
      <h4>새 이미지 업로드</h4>
      <form id="upload-profile-pic-form">
        <input
          type="file"
          id="new-profile-pic-file"
          accept="image/*"
          required
        /><br />
        <button type="submit">업로드</button>
      </form>
      <button id="close-modal">닫기</button>
    </div>

    <h2>내 음악 목록 (업로드 + 녹음)</h2>
    <ul id="music-list"></ul>

    <h2>비밀번호 변경</h2>
    <form id="change-password-form">
      <input
        type="password"
        id="old-password"
        placeholder="기존 비밀번호"
        required
      />
      <input
        type="password"
        id="new-password"
        placeholder="새 비밀번호"
        required
      />
      <button type="submit">변경</button>
    </form>

    <button id="delete-account">회원탈퇴</button>
    <script src="js/profile.js"></script>
  </body>
</html>


파일경로: frontend\upload.html
<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <title>음악 업로드</title>
    <link rel="stylesheet" href="css/style.css" />
  </head>
  <body>
    <a href="guitar.html" class="logo">ChordCraft</a>
    <h1>음악 업로드</h1>
    <form id="upload-form">
      <input type="text" id="music-title" placeholder="음악 제목" required />
      <input type="file" id="music-file" accept="audio/*" required />
      <button type="submit">업로드</button>
    </form>
    <script src="js/upload.js"></script>
  </body>
</html>


파일경로: frontend\js\auth.js
// frontend/js/auth.js

const SERVER_URL = "http://localhost:5000";

// 로그인 이벤트
document.getElementById("login-form").addEventListener("submit", async (e) => {
  e.preventDefault();
  const username = document.getElementById("login-username").value;
  const password = document.getElementById("login-password").value;

  const response = await fetch(`${SERVER_URL}/api/users/login`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ username, password }),
  });

  const data = await response.json();
  if (response.ok) {
    alert(data.message);
    localStorage.setItem("token", data.token);
    localStorage.setItem("userId", data.userId);
    window.location.href = "guitar.html";
  } else {
    alert(data.message);
  }
});

// 회원가입 이벤트
document
  .getElementById("register-form")
  .addEventListener("submit", async (e) => {
    e.preventDefault();
    const username = document.getElementById("register-username").value;
    const password = document.getElementById("register-password").value;
    const nickname = document.getElementById("register-nickname").value;

    const response = await fetch(`${SERVER_URL}/api/users/register`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username, password, nickname }),
    });

    const data = await response.json();
    alert(data.message);
  });


파일경로: frontend\js\board.js
// frontend/js/board.js
const SERVER_URL = "http://localhost:5000";
const token = localStorage.getItem("token");

let currentPage = 1;
const postsPerPage = 10;
let allPosts = [];

async function loadPosts() {
  const response = await fetch(`${SERVER_URL}/api/posts`);
  const data = await response.json();
  allPosts = data.posts || [];
  renderPosts();
}

function renderPosts() {
  const boardList = document.getElementById("board-list");
  boardList.innerHTML = "";
  const start = (currentPage - 1) * postsPerPage;
  const end = start + postsPerPage;
  const pagePosts = allPosts.slice(start, end);

  pagePosts.forEach((post, index) => {
    const tr = document.createElement("tr");

    const noTd = document.createElement("td");
    noTd.textContent = allPosts.length - (start + index);
    tr.appendChild(noTd);

    const titleTd = document.createElement("td");
    const titleLink = document.createElement("a");
    titleLink.href = `postDetail.html?postId=${post._id}`;
    titleLink.textContent = post.title || "제목 없음";
    titleTd.appendChild(titleLink);
    tr.appendChild(titleTd);

    const authorTd = document.createElement("td");
    authorTd.textContent = post.author ? post.author.nickname : "알 수 없음";
    tr.appendChild(authorTd);

    const createdAtTd = document.createElement("td");
    const date = new Date(post.createdAt);
    createdAtTd.textContent = date.toLocaleString();
    tr.appendChild(createdAtTd);

    const likesTd = document.createElement("td");
    likesTd.textContent = post.likeCount || 0;
    tr.appendChild(likesTd);

    boardList.appendChild(tr);
  });
}

document.getElementById("prev-page").addEventListener("click", () => {
  if (currentPage > 1) {
    currentPage--;
    renderPosts();
  }
});
document.getElementById("next-page").addEventListener("click", () => {
  if (currentPage * postsPerPage < allPosts.length) {
    currentPage++;
    renderPosts();
  }
});

window.onload = () => {
  loadPosts();
};


파일경로: frontend\js\chords.js
// chords.js

// 기타 코드 데이터베이스
const chordData = {
  C: {
    1: [0, 3, 2, 0, 1, 0], // C Major
    2: [0, 3, 2, 3, 1, 0], // C7
    3: [3, 3, 5, 5, 4, 3], // Cm
    4: [0, 3, 2, 0, 0, 0], // CM7 (C Major 7)
    5: [3, 3, 5, 3, 4, 3], // Cm7 (C Minor 7)
    6: [3, 3, 5, 5, 5, 3], // C Barre Chord
  },
  D: {
    1: [0, 0, 0, 2, 3, 2], // D Major
    2: [0, 0, 0, 2, 1, 2], // D7
    3: [0, 0, 0, 2, 3, 1], // Dm
    4: [0, 0, 0, 2, 2, 2], // DM7 (D Major 7)
    5: [0, 0, 0, 2, 1, 1], // Dm7 (D Minor 7)
    6: [5, 5, 7, 7, 7, 5], // D Barre Chord
  },
  E: {
    1: [0, 2, 2, 1, 0, 0], // E Major
    2: [0, 2, 0, 1, 0, 0], // E7
    3: [0, 2, 2, 0, 0, 0], // Em
    4: [0, 2, 1, 1, 0, 0], // EM7 (E Major 7)
    5: [0, 2, 0, 0, 0, 0], // Em7 (E Minor 7)
    6: [0, 7, 9, 9, 9, 7], // E Barre Chord
  },
  F: {
    1: [1, 3, 3, 2, 1, 1], // F Major
    2: [1, 3, 1, 2, 1, 1], // F7
    3: [1, 3, 3, 1, 1, 1], // Fm
    4: [0, 0, 3, 2, 1, 0], // FM7 (F Major 7)
    5: [1, 3, 1, 1, 1, 1], // Fm7 (F Minor 7)
    6: [1, 3, 3, 2, 1, 1], // F Barre Chord
  },
  G: {
    1: [3, 2, 0, 0, 0, 3], // G Major
    2: [3, 2, 0, 0, 0, 1], // G7
    3: [3, 5, 5, 3, 3, 3], // Gm
    4: [3, 2, 0, 0, 0, 2], // GM7 (G Major 7)
    5: [3, 5, 3, 3, 3, 3], // Gm7 (G Minor 7)
    6: [3, 5, 5, 4, 3, 3], // G Barre Chord
  },
  A: {
    1: [0, 0, 2, 2, 2, 0], // A Major
    2: [0, 0, 2, 0, 2, 0], // A7
    3: [0, 0, 2, 2, 1, 0], // Am
    4: [0, 0, 2, 1, 2, 0], // AM7 (A Major 7)
    5: [0, 0, 2, 0, 1, 0], // Am7 (A Minor 7)
    6: [5, 7, 7, 6, 5, 5], // A Barre Chord
  },
  B: {
    1: [2, 2, 4, 4, 4, 2], // B Major
    2: [0, 2, 1, 2, 0, 2], // B7
    3: [2, 2, 4, 4, 3, 2], // Bm
    4: [2, 2, 4, 3, 4, 2], // BM7 (B Major 7)
    5: [2, 2, 4, 2, 3, 2], // Bm7 (B Minor 7)
    6: [2, 2, 4, 4, 4, 2], // B Barre Chord
  },
};

// 다른 파일에서 사용할 수 있도록 내보내기
export { chordData };


파일경로: frontend\js\editPost.js
// frontend/js/editPost.js
const SERVER_URL = "http://localhost:5000";
const token = localStorage.getItem("token");

if (!token) {
  alert("로그인이 필요합니다.");
  window.location.href = "index.html";
}

let currentPostId = null;
let currentFileUrl = null;
let selectedMusicFile = null;
let selectedSheetFile = null;
let currentEditLibraryMode = "music";

async function loadPostData() {
  const urlParams = new URLSearchParams(window.location.search);
  const postId = urlParams.get("postId");
  currentPostId = postId;
  if (!postId) {
    alert("잘못된 접근입니다.");
    window.location.href = "board.html";
    return;
  }

  try {
    const response = await fetch(`${SERVER_URL}/api/posts/${postId}`);
    const data = await response.json();
    if (!response.ok) {
      alert(data.message);
      window.location.href = "board.html";
      return;
    }

    const post = data.post;
    document.getElementById("edit-post-title").value = post.title;
    document.getElementById("edit-post-content").value = post.content;

    if (post.musicFileUrl) {
      currentFileUrl = post.musicFileUrl;
      document.getElementById("current-file-name").textContent =
        post.musicFileUrl.split("/").pop();
      document.getElementById("current-file-info").style.display = "block";
      document.getElementById("file-actions").style.display = "block";
      document.getElementById("selected-library-music-id").value = ""; // 초기화
      document.getElementById("selected-library-sheet-url").value = ""; // 초기화
    }
  } catch (error) {
    console.error("Error loading post data:", error);
    alert("게시글 데이터를 불러오는 중 오류가 발생했습니다.");
    window.location.href = "board.html";
  }
}

// "파일 삭제" 버튼 클릭 시 처리
document.getElementById("delete-file-button").addEventListener("click", () => {
  currentFileUrl = null;
  document.getElementById("current-file-info").style.display = "none";
  document.getElementById("file-actions").style.display = "none";
  document.getElementById("selected-library-music-id").value = "";
  document.getElementById("selected-library-sheet-url").value = "";
});

// 게시글 수정 폼 제출
document
  .getElementById("edit-post-form")
  .addEventListener("submit", async (e) => {
    e.preventDefault();
    const title = document.getElementById("edit-post-title").value.trim();
    const content = document.getElementById("edit-post-content").value.trim();
    const libraryMusicId = document.getElementById(
      "selected-library-music-id"
    ).value;
    const librarySheetUrl = document.getElementById(
      "selected-library-sheet-url"
    ).value;

    if (!title || !content) {
      alert("제목과 내용을 모두 입력해주세요.");
      return;
    }

    // JSON 객체 생성
    const data = {
      title,
      content,
      libraryMusicId: libraryMusicId || null,
      librarySheetUrl: librarySheetUrl || null,
    };

    try {
      const response = await fetch(`${SERVER_URL}/api/posts/${currentPostId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(data),
      });

      const resData = await response.json();
      if (!response.ok) {
        alert(resData.message || "서버 오류 발생");
      } else {
        alert(resData.message);
        window.location.href = `postDetail.html?postId=${currentPostId}`;
      }
    } catch (error) {
      console.error("Error updating post:", error);
      alert("게시글 수정 중 오류가 발생했습니다.");
    }
  });

// "첨부하기" 버튼 클릭 시 모달 열기
document.getElementById("library-music-btn").addEventListener("click", () => {
  const modal = document.getElementById("edit-music-modal");
  modal.style.display = "block";
  loadEditLibraryItems();
});

// 모달 닫기 버튼
document
  .getElementById("edit-music-modal-close")
  .addEventListener("click", () => {
    document.getElementById("edit-music-modal").style.display = "none";
    resetEditLibrarySelection();
  });

// 라이브러리 모드 전환 버튼들
document
  .getElementById("edit-library-music-switch")
  .addEventListener("click", () => {
    currentEditLibraryMode = "music";
    loadEditLibraryItems();
  });

document
  .getElementById("edit-library-sheet-switch")
  .addEventListener("click", () => {
    currentEditLibraryMode = "sheet";
    loadEditLibraryItems();
  });

// 라이브러리 항목 로드
async function loadEditLibraryItems() {
  const list = document.getElementById("edit-modal-library-list");
  list.innerHTML = "";

  let url;
  if (currentEditLibraryMode === "music") {
    url = `${SERVER_URL}/api/music/user`;
  } else {
    url = `${SERVER_URL}/api/sheets/user`;
  }

  try {
    const res = await fetch(url, {
      headers: { Authorization: `Bearer ${token}` },
    });
    const data = await res.json();

    let items;
    if (currentEditLibraryMode === "music") {
      items = data.musicList || [];
    } else {
      items = data.sheets || [];
    }

    if (items.length === 0) {
      list.textContent = "등록된 항목이 없습니다.";
      document.getElementById("edit-selected-item").textContent = "";
      document.getElementById("attach-edit-selected-item").disabled = true;
      return;
    }

    // 선택된 항목 초기화
    selectedMusicFile = null;
    selectedSheetFile = null;
    document.getElementById("edit-selected-item").textContent = "";
    document.getElementById("attach-edit-selected-item").disabled = true;

    items.forEach((item) => {
      const li = document.createElement("li");
      li.textContent = item.title;
      li.addEventListener("click", () => {
        // 선택 효과
        list
          .querySelectorAll("li")
          .forEach((li) => li.classList.remove("selected"));
        li.classList.add("selected");

        if (currentEditLibraryMode === "music") {
          selectedMusicFile = item;
          selectedSheetFile = null;
          document.getElementById("selected-library-sheet-url").value = "";
          document.getElementById("selected-library-music-id").value = item._id;
        } else {
          selectedSheetFile = item;
          selectedMusicFile = null;
          document.getElementById("selected-library-music-id").value = "";
          document.getElementById("selected-library-sheet-url").value =
            item.fileUrl;
        }
        document.getElementById(
          "edit-selected-item"
        ).textContent = `선택된 항목: ${item.title}`;
        document.getElementById("attach-edit-selected-item").disabled = false;
      });
      list.appendChild(li);
    });
  } catch (error) {
    console.error("Error loading edit library items:", error);
    alert("라이브러리를 불러오는 중 오류가 발생했습니다.");
  }
}

// "첨부" 버튼 클릭 시 모달 닫기 및 알림
document
  .getElementById("attach-edit-selected-item")
  .addEventListener("click", () => {
    const modal = document.getElementById("edit-music-modal");
    modal.style.display = "none";
    alert("첨부가 완료되었습니다.");
  });

// 선택 초기화 함수
function resetEditLibrarySelection() {
  const list = document.getElementById("edit-modal-library-list");
  list.querySelectorAll("li").forEach((li) => li.classList.remove("selected"));
  document.getElementById("edit-selected-item").textContent = "";
  document.getElementById("attach-edit-selected-item").disabled = true;
}

window.onload = () => {
  loadPostData();
};


파일경로: frontend\js\frequencies.js
// frequencies.js

// 기타 현별 기본 주파수 설정 (6현부터 1현까지)
const stringFrequencies = {
  6: {
    0: 82.41, // 개방현 (6번 현 개방)
    1: 87.31, // 1번 프랫
    2: 92.5, // 2번 프랫
    3: 98.0, // 3번 프랫
    4: 103.83, // 4번 프랫
    5: 110.0, // 5번 프랫
  },
  5: {
    0: 110.0, // 개방현 (5번 현 개방)
    1: 116.54, // 1번 프랫
    2: 123.47, // 2번 프랫
    3: 130.81, // 3번 프랫
    4: 138.59, // 4번 프랫
    5: 146.83, // 5번 프랫
  },
  4: {
    0: 146.83, // 개방현 (4번 현 개방)
    1: 155.56, // 1번 프랫
    2: 164.81, // 2번 프랫
    3: 174.61, // 3번 프랫
    4: 185.0, // 4번 프랫
    5: 196.0, // 5번 프랫
  },
  3: {
    0: 196.0, // 개방현 (3번 현 개방)
    1: 207.65, // 1번 프랫
    2: 220.0, // 2번 프랫
    3: 233.08, // 3번 프랫
    4: 246.94, // 4번 프랫
    5: 261.63, // 5번 프랫
  },
  2: {
    0: 246.94, // 개방현 (2번 현 개방)
    1: 261.63, // 1번 프랫
    2: 277.18, // 2번 프랫
    3: 293.66, // 3번 프랫
    4: 311.13, // 4번 프랫
    5: 329.63, // 5번 프랫
  },
  1: {
    0: 329.63, // 개방현 (1번 현 개방)
    1: 349.23, // 1번 프랫
    2: 369.99, // 2번 프랫
    3: 392.0, // 3번 프랫
    4: 415.3, // 4번 프랫
    5: 440.0, // 5번 프랫
  },
};

export { stringFrequencies };


파일경로: frontend\js\guitar.js
// frontend/js/guitar.js
import { chordData } from "./chords.js";
import { stringFrequencies } from "./frequencies.js";

const SERVER_URL = "http://localhost:5000";

const token = localStorage.getItem("token");
if (!token) {
  alert("로그인이 필요합니다.");
  window.location.href = "index.html";
}

document.getElementById("logout-button").addEventListener("click", () => {
  localStorage.removeItem("token");
  localStorage.removeItem("userId");
  window.location.href = "index.html";
});

document.querySelector(".logo").addEventListener("click", () => {
  window.location.href = "guitar.html";
});

let codeKeys = ["C", "D", "E", "F", "G", "A", "B"];
let chordTypeKeys = ["1", "2", "3", "4", "5", "6"];
let stringKeys = ["u", "i", "o", "p", "[", "]"];

function loadSettings() {
  const savedCodeKeys = localStorage.getItem("codeKeys");
  const savedChordTypeKeys = localStorage.getItem("chordTypeKeys");
  const savedStringKeys = localStorage.getItem("stringKeys");

  if (savedCodeKeys) {
    codeKeys = savedCodeKeys.split(",");
    document.getElementById("code-keys").value = codeKeys.join(",");
  }

  if (savedChordTypeKeys) {
    chordTypeKeys = savedChordTypeKeys.split(",");
    document.getElementById("chord-type-keys").value = chordTypeKeys.join(",");
  }

  if (savedStringKeys) {
    stringKeys = savedStringKeys.split(",");
    document.getElementById("string-keys").value = stringKeys.join(",");
  }
}
loadSettings();

function saveSettings() {
  localStorage.setItem("codeKeys", codeKeys.join(","));
  localStorage.setItem("chordTypeKeys", chordTypeKeys.join(","));
  localStorage.setItem("stringKeys", stringKeys.join(","));
}

document
  .getElementById("keyboard-settings-form")
  .addEventListener("submit", (e) => {
    e.preventDefault();
    codeKeys = document.getElementById("code-keys").value.split(",");
    chordTypeKeys = document.getElementById("chord-type-keys").value.split(",");
    stringKeys = document.getElementById("string-keys").value.split(",");
    saveSettings();
    alert("키보드 설정이 저장되었습니다.");
  });

let currentChord = null;
let currentChordType = null;
let isRecording = false;
let mediaRecorder = null;
let recordedChunks = [];
let audioContext = null;
let dest = null;

const activeStrings = new Set();

document.addEventListener(
  "click",
  async () => {
    if (!audioContext) {
      audioContext = new (window.AudioContext || window.webkitAudioContext)();
    }
    if (audioContext.state === "suspended") {
      try {
        await audioContext.resume();
      } catch (err) {
        console.error("AudioContext resume error", err);
      }
    }
  },
  { once: true }
);

document.addEventListener("keydown", (e) => {
  const upperKey = e.key.toUpperCase();
  const lowerKey = e.key.toLowerCase();

  if (codeKeys.includes(upperKey)) {
    currentChord = upperKey;
    updateChord();
  }

  if (chordTypeKeys.includes(lowerKey)) {
    currentChordType = lowerKey;
    updateChord();
  }

  if (stringKeys.includes(lowerKey)) {
    activeStrings.add(lowerKey);
    playString(lowerKey);
  }
});

document.addEventListener("keyup", (e) => {
  const lowerKey = e.key.toLowerCase();
  if (stringKeys.includes(lowerKey)) {
    activeStrings.delete(lowerKey);
  }
});

function updateChord() {
  displayCurrentChord();
}

function displayCurrentChord() {
  const displayElement = document.getElementById("current-chord-display");
  if (currentChord && currentChordType) {
    let chordTypeName = getChordTypeName(currentChordType);
    displayElement.textContent = `선택된 코드: ${currentChord}${chordTypeName}`;
  } else if (currentChord && !currentChordType) {
    displayElement.textContent = `선택된 코드: ${currentChord}`;
  } else {
    displayElement.textContent = "선택된 코드: 없음";
  }
}

function getChordTypeName(chordTypeKey) {
  const chordTypeNames = {
    1: "",
    2: "7",
    3: "m",
    4: "M7",
    5: "m7",
    6: " (Barre)",
  };
  return chordTypeNames[chordTypeKey] || "";
}

function playString(key) {
  if (!audioContext || audioContext.state !== "running") return;

  const index = stringKeys.indexOf(key);
  if (index === -1) return;

  const stringNumber = (6 - index).toString();

  let fretNumber = 0;
  if (currentChord && currentChordType) {
    const chord = chordData[currentChord][currentChordType];
    fretNumber = chord ? chord[6 - parseInt(stringNumber)] : 0;
  }

  if (fretNumber < 0 || fretNumber > 5) {
    fretNumber = 0;
  }

  const baseFrequency = stringFrequencies[parseInt(stringNumber)];
  if (!baseFrequency) return;

  const frequency = baseFrequency[fretNumber];
  if (!frequency) {
    animateString(stringNumber);
    return;
  }

  playGuitarSound(frequency);
  animateString(stringNumber);
}

function playGuitarSound(frequency) {
  if (!audioContext || audioContext.state !== "running") return;

  const now = audioContext.currentTime;
  const oscillator = audioContext.createOscillator();
  oscillator.type = "sawtooth";
  const filter = audioContext.createBiquadFilter();
  filter.type = "lowpass";
  filter.frequency.setValueAtTime(1000, now);
  const gainNode = audioContext.createGain();
  gainNode.gain.setValueAtTime(1, now);
  gainNode.gain.exponentialRampToValueAtTime(0.001, now + 2);
  oscillator.frequency.setValueAtTime(frequency, now);
  oscillator.connect(filter);
  filter.connect(gainNode);
  gainNode.connect(audioContext.destination);

  if (dest) {
    gainNode.connect(dest);
  }

  oscillator.start(now);
  oscillator.stop(now + 2);
}

function animateString(stringNumber) {
  const stringElement = document.querySelector(
    `.string[data-string="${stringNumber}"]`
  );
  if (!stringElement) return;
  stringElement.classList.add("active");
  setTimeout(() => {
    stringElement.classList.remove("active");
  }, 200);
}

// 녹음
document.getElementById("record-button").addEventListener("click", async () => {
  if (!audioContext) {
    audioContext = new (window.AudioContext || window.webkitAudioContext)();
  }
  if (audioContext.state === "suspended") {
    try {
      await audioContext.resume();
    } catch (err) {
      console.error("AudioContext resume error", err);
    }
  }

  isRecording = !isRecording;
  const recordButton = document.getElementById("record-button");
  recordButton.textContent = isRecording ? "녹음 중지" : "녹음 시작";

  if (isRecording) {
    startRecording();
  } else {
    stopRecording();
  }
});

async function startRecording() {
  if (!audioContext || audioContext.state !== "running") {
    console.warn("AudioContext not running, cannot start recording");
    return;
  }

  recordedChunks = [];
  dest = audioContext.createMediaStreamDestination();
  // MediaStreamSource를 dest로 연결
  const source = audioContext.createMediaStreamSource(dest.stream);
  mediaRecorder = new MediaRecorder(dest.stream);
  mediaRecorder.ondataavailable = (e) => {
    if (e.data.size > 0) {
      recordedChunks.push(e.data);
    }
  };
  mediaRecorder.onstop = () => {
    console.log("Recording stopped, ready to save");
    // 모달 표시
    document.getElementById("record-name-modal").style.display = "block";
  };
  mediaRecorder.start();
  console.log("Recording started");
}

function stopRecording() {
  if (!mediaRecorder || mediaRecorder.state !== "recording") {
    console.warn("No active recording to stop");
    return;
  }
  mediaRecorder.stop();
}

// Handle save-recorded-music button
document
  .getElementById("save-recorded-music")
  .addEventListener("click", async () => {
    const title = document.getElementById("recorded-music-title").value.trim();
    if (!title) {
      alert("음악 제목을 입력해주세요.");
      return;
    }
    if (recordedChunks.length === 0) {
      alert("녹음된 음악이 없습니다.");
      return;
    }

    const blob = new Blob(recordedChunks, { type: "audio/webm" });
    const file = new File([blob], `${title}.webm`, { type: "audio/webm" });

    const formData = new FormData();
    formData.append("title", title);
    formData.append("music", file);

    const res = await fetch(`${SERVER_URL}/api/music/upload`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${token}`,
      },
      body: formData,
    });

    const resData = await res.json();
    if (res.ok) {
      alert("녹음한 음악 저장 성공");
      // 녹음 상태 초기화
      recordedChunks = [];
      document.getElementById("recorded-music-title").value = "";
      document.getElementById("record-name-modal").style.display = "none";
    } else {
      alert("녹음한 음악 저장 실패: " + (resData.error || resData.message));
    }
  });

// Handle close-record-name-modal button
document
  .getElementById("close-record-name-modal")
  .addEventListener("click", () => {
    document.getElementById("record-name-modal").style.display = "none";
  });

// 악보 보관함 열기
document
  .getElementById("open-sheet-upload")
  .addEventListener("click", async () => {
    await loadSheetLibrary();
    document.getElementById("sheet-library-modal").style.display = "block";
  });

document
  .getElementById("close-sheet-library-modal")
  .addEventListener("click", () => {
    document.getElementById("sheet-library-modal").style.display = "none";
  });

// 악보 업로드
document
  .getElementById("upload-sheet-btn")
  .addEventListener("click", async () => {
    const title = document.getElementById("sheet-upload-title").value.trim();
    const file = document.getElementById("sheet-upload-input").files[0];
    if (!file) {
      alert("악보 파일을 선택해주세요.");
      return;
    }

    const formData = new FormData();
    formData.append("title", title);
    formData.append("sheet", file);

    const res = await fetch(`${SERVER_URL}/api/sheets/upload`, {
      method: "POST",
      headers: { Authorization: `Bearer ${token}` },
      body: formData,
    });
    const resData = await res.json();
    if (res.ok) {
      alert("악보 업로드 성공");
      document.getElementById("sheet-upload-title").value = "";
      document.getElementById("sheet-upload-input").value = "";
      await loadSheetLibrary();
    } else {
      alert("악보 업로드 실패: " + resData.error);
    }
  });

async function loadSheetLibrary() {
  const res = await fetch(`${SERVER_URL}/api/sheets/user`, {
    headers: { Authorization: `Bearer ${token}` },
  });
  const data = await res.json();
  const sheetListDiv = document.getElementById("sheet-library-list");
  sheetListDiv.innerHTML = "";
  if (res.ok && data.sheets && data.sheets.length > 0) {
    data.sheets.forEach((sheet) => {
      const sheetItem = document.createElement("div");
      sheetItem.style.border = "1px solid #ccc";
      sheetItem.style.padding = "5px";
      sheetItem.style.marginBottom = "5px";

      const img = document.createElement("img");
      img.src = SERVER_URL + sheet.fileUrl;
      img.width = 50;
      img.height = 50;
      img.style.cursor = "pointer";
      img.style.verticalAlign = "middle";
      img.addEventListener("click", () => {
        const sheetMusic = document.getElementById("sheet-music");
        sheetMusic.src = SERVER_URL + sheet.fileUrl;
        document.getElementById("sheet-library-modal").style.display = "none";
      });
      sheetItem.appendChild(img);
      sheetItem.appendChild(document.createTextNode(" " + sheet.title + " "));

      // 삭제 버튼
      const deleteBtn = document.createElement("button");
      deleteBtn.textContent = "삭제";
      deleteBtn.style.marginLeft = "10px";
      deleteBtn.addEventListener("click", async () => {
        if (!confirm("정말 이 악보를 삭제하시겠습니까?")) return;
        const delRes = await fetch(`${SERVER_URL}/api/sheets/${sheet._id}`, {
          method: "DELETE",
          headers: { Authorization: `Bearer ${token}` },
        });
        const delData = await delRes.json();
        if (delRes.ok) {
          alert("악보 삭제 성공");
          await loadSheetLibrary();
        } else {
          alert("악보 삭제 실패: " + delData.error);
        }
      });
      sheetItem.appendChild(deleteBtn);

      sheetListDiv.appendChild(sheetItem);
    });
  } else {
    sheetListDiv.textContent = "등록된 악보가 없습니다.";
  }
}


파일경로: frontend\js\library.js
// frontend/js/library.js
const SERVER_URL = "http://localhost:5000";
const token = localStorage.getItem("token");

if (!token) {
  alert("로그인이 필요합니다.");
  window.location.href = "index.html";
}

const musicTab = document.getElementById("music-tab");
const sheetTab = document.getElementById("sheet-tab");
const musicContent = document.getElementById("music-content");
const sheetContent = document.getElementById("sheet-content");

musicTab.addEventListener("click", () => {
  musicContent.classList.remove("hidden");
  sheetContent.classList.add("hidden");
});

sheetTab.addEventListener("click", () => {
  sheetContent.classList.remove("hidden");
  musicContent.classList.add("hidden");
});

async function loadUserMusic() {
  const response = await fetch(`${SERVER_URL}/api/music/user`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });
  const data = await response.json();
  const musicList = document.getElementById("music-list");
  musicList.innerHTML = "";
  if (!data.musicList || data.musicList.length === 0) {
    const li = document.createElement("li");
    li.textContent = "등록된 음악이 없습니다.";
    musicList.appendChild(li);
    return;
  }

  data.musicList.forEach((music) => {
    const li = document.createElement("li");
    li.textContent = `${music.title} `;
    const playButton = document.createElement("button");
    playButton.classList.add("btn");
    playButton.textContent = "재생";
    playButton.onclick = () => {
      const audio = new Audio(`${SERVER_URL}${music.fileUrl}`);
      audio.play();
    };
    li.appendChild(playButton);

    // 삭제 버튼 추가
    const deleteBtn = document.createElement("button");
    deleteBtn.textContent = "삭제";
    deleteBtn.addEventListener("click", async () => {
      if (!confirm("정말 이 음악을 삭제하시겠습니까?")) return;
      const delRes = await fetch(`${SERVER_URL}/api/music/${music._id}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      const delData = await delRes.json();
      if (delRes.ok) {
        alert("음악 삭제 성공");
        loadUserMusic();
      } else {
        alert("음악 삭제 실패: " + (delData.error || delData.message));
      }
    });
    li.appendChild(deleteBtn);

    musicList.appendChild(li);
  });
}

async function loadUserSheets() {
  const response = await fetch(`${SERVER_URL}/api/sheets/user`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });
  const data = await response.json();
  const sheetList = document.getElementById("sheet-list");
  sheetList.innerHTML = "";
  if (!data.sheets || data.sheets.length === 0) {
    const li = document.createElement("li");
    li.textContent = "등록된 악보가 없습니다.";
    sheetList.appendChild(li);
    return;
  }

  data.sheets.forEach((sheet) => {
    const li = document.createElement("li");
    li.textContent = `${sheet.title} `;
    const img = document.createElement("img");
    img.src = SERVER_URL + sheet.fileUrl;
    img.width = 50;
    img.height = 50;
    li.appendChild(img);

    const deleteBtn = document.createElement("button");
    deleteBtn.textContent = "삭제";
    deleteBtn.addEventListener("click", async () => {
      if (!confirm("정말 이 악보를 삭제하시겠습니까?")) return;
      const delRes = await fetch(`${SERVER_URL}/api/sheets/${sheet._id}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      const delData = await delRes.json();
      if (delRes.ok) {
        alert("악보 삭제 성공");
        loadUserSheets();
      } else {
        alert("악보 삭제 실패: " + (delData.error || delData.message));
      }
    });
    li.appendChild(deleteBtn);

    sheetList.appendChild(li);
  });
}

// 악보 업로드
document
  .getElementById("sheet-upload-form")
  .addEventListener("submit", async (e) => {
    e.preventDefault();
    const title = document.getElementById("sheet-title").value;
    const file = document.getElementById("sheet-file").files[0];
    if (!file) return alert("파일을 선택하세요.");

    const formData = new FormData();
    formData.append("title", title);
    formData.append("sheet", file);

    const res = await fetch(`${SERVER_URL}/api/sheets/upload`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${token}`,
      },
      body: formData,
    });

    const resData = await res.json();
    if (res.ok) {
      alert("악보 업로드 성공");
      document.getElementById("sheet-title").value = "";
      document.getElementById("sheet-file").value = "";
      loadUserSheets();
    } else {
      alert("악보 업로드 실패: " + (resData.error || resData.message));
    }
  });

window.onload = () => {
  loadUserMusic();
  loadUserSheets();
};


파일경로: frontend\js\myPosts.js
const SERVER_URL = "http://localhost:5000";
const token = localStorage.getItem("token");

if (!token) {
  alert("로그인이 필요합니다.");
  window.location.href = "index.html";
}

async function loadMyPosts() {
  const response = await fetch(`${SERVER_URL}/api/posts/mine`, {
    headers: { Authorization: `Bearer ${token}` },
  });
  const data = await response.json();
  const myBoardList = document.getElementById("my-board-list");
  myBoardList.innerHTML = "";

  data.posts.forEach((post, index) => {
    const tr = document.createElement("tr");

    const noTd = document.createElement("td");
    noTd.textContent = data.posts.length - index;
    tr.appendChild(noTd);

    const titleTd = document.createElement("td");
    const titleLink = document.createElement("a");
    titleLink.href = `postDetail.html?postId=${post._id}`;
    titleLink.textContent = post.title || "제목 없음";
    titleTd.appendChild(titleLink);
    tr.appendChild(titleTd);

    const authorTd = document.createElement("td");
    authorTd.textContent = post.author ? post.author.nickname : "알 수 없음";
    tr.appendChild(authorTd);

    const createdAtTd = document.createElement("td");
    const date = new Date(post.createdAt);
    createdAtTd.textContent = date.toLocaleString();
    tr.appendChild(createdAtTd);

    const likesTd = document.createElement("td");
    likesTd.textContent = post.likeCount || 0;
    tr.appendChild(likesTd);

    myBoardList.appendChild(tr);
  });
}

window.onload = () => {
  loadMyPosts();
};


파일경로: frontend\js\newPost.js
// frontend/js/newPost.js
const SERVER_URL = "http://localhost:5000";
const token = localStorage.getItem("token");

if (!token) {
  alert("로그인이 필요합니다.");
  window.location.href = "index.html";
}

let selectedMusicFile = null;
let selectedSheetFile = null;
let currentLibraryMode = "music"; // "music" or "sheet"

// "첨부하기" 버튼 클릭 시 모달 열기
document
  .getElementById("attach-music-btn")
  .addEventListener("click", async () => {
    const modal = document.getElementById("music-modal");
    modal.style.display = "block";
    loadLibraryItems();
  });

// 모달 닫기 버튼
document.getElementById("music-modal-close").addEventListener("click", () => {
  document.getElementById("music-modal").style.display = "none";
  resetLibrarySelection();
});

// 라이브러리 모드 전환 버튼들
document
  .getElementById("library-music-switch")
  .addEventListener("click", () => {
    currentLibraryMode = "music";
    loadLibraryItems();
  });
document
  .getElementById("library-sheet-switch")
  .addEventListener("click", () => {
    currentLibraryMode = "sheet";
    loadLibraryItems();
  });

// 라이브러리 항목 로드
async function loadLibraryItems() {
  const list = document.getElementById("modal-library-list");
  list.innerHTML = "";

  let url;
  if (currentLibraryMode === "music") {
    url = `${SERVER_URL}/api/music/user`;
  } else {
    url = `${SERVER_URL}/api/sheets/user`;
  }

  try {
    const res = await fetch(url, {
      headers: { Authorization: `Bearer ${token}` },
    });
    const data = await res.json();

    let items;
    if (currentLibraryMode === "music") {
      items = data.musicList || [];
    } else {
      items = data.sheets || [];
    }

    if (items.length === 0) {
      list.textContent = "등록된 항목이 없습니다.";
      document.getElementById("selected-item").textContent = "";
      document.getElementById("attach-selected-item").disabled = true;
      return;
    }

    // 선택된 항목 초기화
    selectedMusicFile = null;
    selectedSheetFile = null;
    document.getElementById("selected-item").textContent = "";
    document.getElementById("attach-selected-item").disabled = true;

    items.forEach((item) => {
      const li = document.createElement("li");
      li.textContent = item.title;
      li.addEventListener("click", () => {
        // 선택 효과
        list
          .querySelectorAll("li")
          .forEach((li) => li.classList.remove("selected"));
        li.classList.add("selected");

        if (currentLibraryMode === "music") {
          selectedMusicFile = item;
          selectedSheetFile = null;
          document.getElementById("selected-library-sheet-url").value = "";
          document.getElementById("selected-library-music-id").value = item._id;
        } else {
          selectedSheetFile = item;
          selectedMusicFile = null;
          document.getElementById("selected-library-music-id").value = "";
          document.getElementById("selected-library-sheet-url").value =
            item.fileUrl;
        }
        document.getElementById(
          "selected-item"
        ).textContent = `선택된 항목: ${item.title}`;
        document.getElementById("attach-selected-item").disabled = false;
      });
      list.appendChild(li);
    });
  } catch (error) {
    console.error("Error loading library items:", error);
    alert("라이브러리를 불러오는 중 오류가 발생했습니다.");
  }
}

// "첨부" 버튼 클릭 시 모달 닫기 및 알림
document
  .getElementById("attach-selected-item")
  .addEventListener("click", () => {
    const modal = document.getElementById("music-modal");
    modal.style.display = "none";
    alert("첨부가 완료되었습니다.");
  });

// 선택 초기화 함수
function resetLibrarySelection() {
  const list = document.getElementById("modal-library-list");
  list.querySelectorAll("li").forEach((li) => li.classList.remove("selected"));
  document.getElementById("selected-item").textContent = "";
  document.getElementById("attach-selected-item").disabled = true;
}

// 게시글 작성 폼 제출
document
  .getElementById("new-post-form")
  .addEventListener("submit", async (e) => {
    e.preventDefault();
    const title = document.getElementById("new-post-title").value.trim();
    const content = document.getElementById("new-post-content").value.trim();
    const libraryMusicId = document.getElementById(
      "selected-library-music-id"
    ).value;
    const librarySheetUrl = document.getElementById(
      "selected-library-sheet-url"
    ).value;

    if (!title || !content) {
      alert("제목과 내용을 모두 입력해주세요.");
      return;
    }

    // JSON 객체 생성
    const data = {
      title,
      content,
      libraryMusicId: libraryMusicId || null,
      librarySheetUrl: librarySheetUrl || null,
    };

    try {
      const response = await fetch(`${SERVER_URL}/api/posts`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(data),
      });

      const resData = await response.json();
      alert(resData.message);
      if (response.ok) {
        window.location.href = "board.html";
      }
    } catch (error) {
      console.error("Error creating new post:", error);
      alert("새 게시글 작성 중 오류가 발생했습니다.");
    }
  });


파일경로: frontend\js\postDetail.js
// frontend/js/postDetail.js
const SERVER_URL = "http://localhost:5000";
const token = localStorage.getItem("token");
let currentPostId = null;
let currentUserId = localStorage.getItem("userId");

async function loadPostDetail() {
  const urlParams = new URLSearchParams(window.location.search);
  const postId = urlParams.get("postId");
  currentPostId = postId;
  if (!postId) {
    alert("잘못된 접근입니다.");
    window.location.href = "board.html";
    return;
  }

  const response = await fetch(`${SERVER_URL}/api/posts/${postId}`);
  const data = await response.json();
  if (!response.ok) {
    alert(data.message);
    window.location.href = "board.html";
    return;
  }

  const post = data.post;
  document.getElementById("post-title").textContent = post.title;
  document.getElementById("post-author").textContent = post.author
    ? post.author.nickname
    : "알 수 없음";
  const date = new Date(post.createdAt);
  document.getElementById("post-date").textContent = date.toLocaleString();

  // post.content을 HTML로 처리
  displayPostContent(post.content);

  document.getElementById("like-count").textContent = post.likeCount || 0;

  // 초기 좋아요 상태 반영
  const likeButton = document.getElementById("like-button");
  const userId = currentUserId;
  const userLiked =
    post.likes && post.likes.some((uid) => uid.toString() === userId);
  if (userLiked) {
    likeButton.classList.add("liked");
  } else {
    likeButton.classList.remove("liked");
  }

  const postMusicDiv = document.getElementById("post-music");
  postMusicDiv.innerHTML = "";
  if (post.musicFileUrl) {
    const playButton = document.createElement("button");
    playButton.textContent = "음악 재생";
    playButton.addEventListener("click", () => {
      const audio = new Audio(`${SERVER_URL}${post.musicFileUrl}`);
      audio.play();
    });
    postMusicDiv.appendChild(playButton);
  }

  // 댓글 표시
  const commentListDiv = document.getElementById("comment-list");
  commentListDiv.innerHTML = "";
  post.comments.forEach((comment) => {
    const div = document.createElement("div");
    div.classList.add("comment");
    const authorName = comment.author ? comment.author.nickname : "알 수 없음";
    div.innerHTML = `<span class="comment-author">${authorName}</span>: ${comment.content}`;

    if (comment.author && comment.author._id === currentUserId) {
      const btnContainer = document.createElement("span");
      btnContainer.style.float = "right";
      btnContainer.style.marginLeft = "10px";

      const editCommentBtn = document.createElement("button");
      editCommentBtn.textContent = "댓글 수정";
      editCommentBtn.onclick = async () => {
        const newContent = prompt("새 댓글 내용을 입력하세요", comment.content);
        if (!newContent) return;
        const res = await fetch(
          `${SERVER_URL}/api/posts/${currentPostId}/comments/${comment._id}`,
          {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
            body: JSON.stringify({ content: newContent }),
          }
        );
        const resData = await res.json();
        if (res.ok) {
          alert(resData.message);
          window.location.reload();
        } else {
          alert(resData.message);
        }
      };
      btnContainer.appendChild(editCommentBtn);

      const deleteCommentBtn = document.createElement("button");
      deleteCommentBtn.textContent = "댓글 삭제";
      deleteCommentBtn.onclick = async () => {
        if (!confirm("댓글을 삭제하시겠습니까?")) return;
        const res = await fetch(
          `${SERVER_URL}/api/posts/${currentPostId}/comments/${comment._id}`,
          {
            method: "DELETE",
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );
        const resData = await res.json();
        if (res.ok) {
          alert(resData.message);
          window.location.reload();
        } else {
          alert(resData.message);
        }
      };
      btnContainer.appendChild(deleteCommentBtn);

      div.appendChild(btnContainer);
    }

    commentListDiv.appendChild(div);
  });

  // 작성자 본인이면 수정/삭제 버튼 노출
  if (post.author && post.author._id === currentUserId) {
    document.getElementById("edit-button").style.display = "inline-block";
    document.getElementById("delete-button").style.display = "inline-block";
  }
}

function displayPostContent(content) {
  const contentElement = document.getElementById("post-content");
  const regex = /\[악보: (\/uploads\/sheets\/[^)]+)\]/g;
  const parts = content.split(regex);
  contentElement.innerHTML = ""; // 기존 내용 초기화

  for (let i = 0; i < parts.length; i++) {
    if (i % 2 === 0) {
      // 일반 텍스트
      const p = document.createElement("p");
      p.textContent = parts[i];
      contentElement.appendChild(p);
    } else {
      // 악보 이미지 URL
      const img = document.createElement("img");
      img.src = `${SERVER_URL}${parts[i]}`;
      img.alt = "악보";
      img.style.maxWidth = "100%";
      contentElement.appendChild(img);
    }
  }
}

document
  .getElementById("comment-submit")
  .addEventListener("click", async () => {
    const content = document.getElementById("comment-content").value.trim();
    if (!content) {
      alert("댓글 내용을 입력하세요.");
      return;
    }

    const res = await fetch(
      `${SERVER_URL}/api/posts/${currentPostId}/comments`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ content }),
      }
    );

    const resData = await res.json();
    if (res.ok) {
      alert(resData.message);
      window.location.reload();
    } else {
      alert(resData.message);
    }
  });

document.getElementById("like-button").addEventListener("click", async () => {
  const res = await fetch(`${SERVER_URL}/api/posts/${currentPostId}/like`, {
    method: "POST",
    headers: { Authorization: `Bearer ${token}` },
  });
  const data = await res.json();
  if (res.ok) {
    document.getElementById("like-count").textContent = data.likeCount;
    const likeButton = document.getElementById("like-button");
    // 토글 liked 클래스
    if (likeButton.classList.contains("liked")) {
      likeButton.classList.remove("liked");
    } else {
      likeButton.classList.add("liked");
    }
  } else {
    alert(data.message);
  }
});

document.getElementById("edit-button").addEventListener("click", () => {
  window.location.href = `editPost.html?postId=${currentPostId}`;
});

document.getElementById("delete-button").addEventListener("click", async () => {
  if (!confirm("정말 삭제하시겠습니까?")) return;

  const res = await fetch(`${SERVER_URL}/api/posts/${currentPostId}`, {
    method: "DELETE",
    headers: { Authorization: `Bearer ${token}` },
  });
  const data = await res.json();
  if (res.ok) {
    alert(data.message);
    window.location.href = "board.html";
  } else {
    alert(data.message);
  }
});

window.onload = () => {
  loadPostDetail();
};


파일경로: frontend\js\profile.js
// frontend/js/profile.js
// 수정: 업로드된 이미지 경로를 서버 응답으로부터 받아 즉시 반영.
// CORS / CORB 문제 해결 위해서는 서버에서 Access-Control-Allow-Origin 헤더 설정 필요.
// 여기서는 프론트만 수정.
const SERVER_URL = "http://localhost:5000";
const token = localStorage.getItem("token");

if (!token) {
  alert("로그인이 필요합니다.");
  window.location.href = "index.html";
}

let userData = null;

window.onload = async () => {
  const response = await fetch(`${SERVER_URL}/api/users/profile`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });

  const data = await response.json();
  if (response.ok) {
    userData = data.user;
    document.getElementById("nickname-display").textContent =
      data.user.nickname;

    let profilePicPath = data.user.profilePicture
      ? data.user.profilePicture
      : "/assets/images/profiles/default-profile.png";

    document.getElementById("profile-picture").src =
      SERVER_URL + profilePicPath;

    const musicList = document.getElementById("music-list");
    musicList.innerHTML = "";
    if (!data.user.uploads || data.user.uploads.length === 0) {
      const li = document.createElement("li");
      li.textContent = "등록된 음악이 없습니다.";
      musicList.appendChild(li);
    } else {
      data.user.uploads.forEach((music) => {
        const listItem = document.createElement("li");
        listItem.textContent = music.title + " ";
        const playButton = document.createElement("button");
        playButton.textContent = "재생";
        playButton.onclick = () => {
          const audio = new Audio(`${SERVER_URL}${music.fileUrl}`);
          audio.play();
        };
        listItem.appendChild(playButton);
        musicList.appendChild(listItem);
      });
    }
  } else {
    alert(data.message);
  }
};

// 비밀번호 변경 동일
document
  .getElementById("change-password-form")
  .addEventListener("submit", async (e) => {
    e.preventDefault();
    const oldPassword = document.getElementById("old-password").value;
    const newPassword = document.getElementById("new-password").value;
    const response = await fetch(`${SERVER_URL}/api/users/change-password`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({ oldPassword, newPassword }),
    });
    const data = await response.json();
    alert(data.message);
  });

// 회원탈퇴 동일
document
  .getElementById("delete-account")
  .addEventListener("click", async () => {
    if (!confirm("정말 회원탈퇴 하시겠습니까?")) return;
    const response = await fetch(`${SERVER_URL}/api/users/delete`, {
      method: "DELETE",
      headers: { Authorization: `Bearer ${token}` },
    });
    const data = await response.json();
    alert(data.message);
    if (response.ok) {
      localStorage.removeItem("token");
      localStorage.removeItem("userId");
      window.location.href = "index.html";
    }
  });

// 프로필 사진 변경 모달
const modal = document.getElementById("profile-image-modal");
const changeBtn = document.getElementById("change-profile-pic");
const closeModalBtn = document.getElementById("close-modal");
const profileImageList = document.getElementById("profile-image-list");

changeBtn.addEventListener("click", () => {
  modal.style.display = "block";
});

closeModalBtn.addEventListener("click", () => {
  modal.style.display = "none";
});

profileImageList.addEventListener("click", async (e) => {
  if (e.target.tagName === "IMG") {
    const selectedImg = e.target.getAttribute("data-img");
    const res = await fetch(`${SERVER_URL}/api/users/profile-picture`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({ profilePicture: selectedImg }),
    });
    const resData = await res.json();
    alert(resData.message);
    if (res.ok) {
      // 즉시 반영
      document.getElementById("profile-picture").src = SERVER_URL + selectedImg;
      modal.style.display = "none";
    }
  }
});

// 새 프로필 이미지 파일 업로드
document
  .getElementById("upload-profile-pic-form")
  .addEventListener("submit", async (e) => {
    e.preventDefault();
    const fileInput = document.getElementById("new-profile-pic-file");
    const file = fileInput.files[0];
    if (!file) return alert("파일을 선택해주세요.");

    const formData = new FormData();
    formData.append("profilePictureFile", file);

    const res = await fetch(`${SERVER_URL}/api/users/profile-picture`, {
      method: "PUT",
      headers: {
        Authorization: `Bearer ${token}`,
      },
      body: formData,
    });
    const resData = await res.json();
    alert(resData.message);
    if (res.ok && resData.fileUrl) {
      // 서버에서 fileUrl을 반환한다고 가정하면, 즉시 반영 가능
      document.getElementById("profile-picture").src =
        SERVER_URL + resData.fileUrl;
      modal.style.display = "none";
    }
  });


파일경로: frontend\js\upload.js
const SERVER_URL = "http://localhost:5000";
const token = localStorage.getItem("token");

if (!token) {
  alert("로그인이 필요합니다.");
  window.location.href = "index.html";
}

document.getElementById("upload-form").addEventListener("submit", async (e) => {
  e.preventDefault();
  const title = document.getElementById("music-title").value;
  const fileInput = document.getElementById("music-file");

  const formData = new FormData();
  formData.append("title", title);
  formData.append("music", fileInput.files[0]);

  const response = await fetch(`${SERVER_URL}/api/music/upload`, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${token}`,
    },
    body: formData,
  });

  const data = await response.json();
  alert(data.message);
});


